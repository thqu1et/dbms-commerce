This trigger is designed to be fired before an update on the "cards" table. It checks the balance of the payment associated with the card being updated and ensures that the payment amount is not greater than the card's balance. If the payment amount is greater, the trigger subtracts the payment amount from the card's balance and outputs "Accepted" using the DBMS_OUTPUT.PUT_LINE function. If the payment amount is less than the card's balance, it raises an application error with the message "Transaction amount does not match balance".

However, there are a few improvements that could be made to this trigger. First, it's a good practice to explicitly specify the column names in the SELECT statement rather than using "SELECT *". This can help prevent issues in case the table schema changes in the future.

Second, it would be a good idea to add some additional error handling code to catch any unexpected errors that may occur during the execution of the trigger. For example, if there is an error during the SELECT statement, the trigger will raise a runtime error. To handle this, we can add an EXCEPTION block to catch any errors and log them using DBMS_OUTPUT.PUT_LINE or some other mechanism.

Finally, it's worth noting that the use of DBMS_OUTPUT.PUT_LINE is not ideal in a trigger, as triggers are often executed within the context of a larger transaction and DBMS_OUTPUT.PUT_LINE output may not be visible outside the trigger. Instead, consider using a logging table or some other mechanism to record the trigger's output.

//

create or replace trigger pay_trigger
before update on cards
for each row
declare 
    check_balance number;
begin 
    select payment_sum into check_balance from payment where payment_id = :new.payment_id;    if :new.cards_balance > check_balance then 
        :new.cards_balance := :new.cards_balance - check_balance ;        	DBMS_OUTPUT.PUT_LINE('Accepted');
    end if; 
   IF :new.cards_balance < check_balance THEN
      RAISE_APPLICATION_ERROR(-20001, 'Transaction amount does not match balance');    END IF;
end;

//

The above code block is a PL/SQL anonymous block that updates the salary of all the staff members in a table named "staff" and then checks whether any rows have been affected by the update statement.

The first line of code declares a variable "total_rows" of type number(2) to store the number of rows affected by the update statement.

The second line of code updates the "salary" column of all rows in the "staff" table by adding 500 to the current value.

The IF statement checks whether any rows have been affected by the update statement. If no rows have been affected, it outputs "no staff selected" using the dbms_output.put_line() procedure.

If rows have been affected, the "total_rows" variable is assigned the number of rows affected by the update statement using the sql%rowcount attribute. The number of rows affected is then outputted using the dbms_output.put_line() procedure.

Overall, this PL/SQL block updates the salaries of all staff members and then provides feedback on whether any rows were updated or not.

//

DECLARE  
   total_rows number(2); 
BEGIN 
   UPDATE staff 
   SET salary = salary + 500; 
   IF sql%notfound THEN 
      dbms_output.put_line('no staff selected'); 
   ELSIF sql%found THEN 
      total_rows := sql%rowcount;
      dbms_output.put_line( total_rows || ' staff selected '); 
   END IF;  
END;

//



//

create or replace procedure group_by_info is
cursor products_info is 
Select p.product_block , s.type_block  
from PRODUCT_END p ,TYPE_END s 
where p.product_block = s.type_block
group by p.product_block , s.type_block;
begin 
dbms_output.put_line('Product Category ');
for product_cat in products_info loop
dbms_output.put_line(product_cat.type_block);
end loop;
end;

//

//



//

create or replace function count_products return number as 
num_products number;
begin 
select count(*) into num_products from product_end;
return num_products;
end;

//
